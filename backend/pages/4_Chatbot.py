import streamlit as st
import pandas as pd
from streamlit_chat import message
import os

def change_colors():
    style = """
       <style>
       .st-emotion-cache-1yiq2ps{
           background-color: #f0f0f0;  /* ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á */
       }
       .stChatInputContainer > div{ /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */
           background-color: #f0f0f0; /* ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */
           color: black; /* ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */
           flex-direction: row-reverse; /* ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ */
       }
        .body{
            padding:0;
            margin:0;
            box-sizing: border-box;
            width:100%;
            height:100%;
        }
        .st-emotion-cache-15hul6a{
            position: fixed;
            left: 90%;
            color:white;
        }
        .stTextInput {
            position: fixed;
            bottom: 0;
            width: 85%;
            margin-bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
        }
        .st-emotion-cache-vl2fub {
            background-color: #f0f0f0; /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */
            color: black; /* ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */
        }
        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: #FF5F5F;
            height: 10vh;
            display: flex;
            align-items: center;
            justify-content: center;
            # z-index: 100;
        }
        .navbar span {
            color: white;
            font-size: 24px;
        }
        .st-emotion-cache-12fmjuu{
            background-color: #FF5F5F;
            # z-index: 1;
        }
        </style>
    """
    
    st.markdown(style, unsafe_allow_html=True)  # ‡πÅ‡∏ó‡∏£‡∏Å CSS

    st.markdown(
        """
        <div class="navbar">
            <span>POSTO</span>
        </div>
        """,
        unsafe_allow_html=True  # ‡πÅ‡∏ó‡∏£‡∏Å HTML
    )
    
def check_login():
    if "login_status" not in st.session_state or not st.session_state.login_status:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô")
        st.session_state.current_page = "Login"
        st.switch_page("pages/1_Login.py")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö messages
st.session_state.setdefault('past', [])
st.session_state.setdefault('generated', [])

def logout():
    if "login_status" in st.session_state:
        st.session_state.login_status = False
    if "email" in st.session_state:
        st.session_state.email = None  # ‡∏•‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å session
    st.success("Logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    st.session_state.current_page = "login"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Login
    st.switch_page("pages/1_Login.py")  # ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Home
    st.experimental_rerun()  # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

CSV_FILE = 'backend/names.csv'

def chat():
    change_colors()
    check_login()
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô CSV
    def check_question_in_csv(question):
        try:
            df = pd.read_csv(CSV_FILE)
            return question in df['name'].values
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV: {e}")
            return False
    
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    def handle_chat(question):
        if question:
            if check_question_in_csv(question):
                return f"‚úÖ ‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏Ç‡∏≠‡∏á {question} ‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö"
            else:
                return f"‚ùå ‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏Ç‡∏≠‡∏á {question} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏£‡∏±‡∏ö"
        return "üö´ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏"
    
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    def on_input_change():
        user_input = st.session_state.user_input
        if user_input:
            st.session_state.past.append(user_input)
            answer = handle_chat(user_input)
            st.session_state.generated.append(answer)
            st.session_state.user_input = ""

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ session_state
    if 'past' not in st.session_state:
        st.session_state['past'] = []

    if 'generated' not in st.session_state:
        st.session_state['generated'] = []

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô container
    chat_placeholder = st.empty()

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    with chat_placeholder.container():
        for i in range(len(st.session_state['generated'])):
            message(st.session_state['past'][i], is_user=True, key=f"user_{i}")
            message(st.session_state['generated'][i], key=f"bot_{i}")

    # ‡∏ä‡πà‡∏≠‡∏á‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    st.text_input("‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏ :", on_change=on_input_change, key="user_input")

if st.button("Logout"):
        logout()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô logout

if __name__ == "__main__":
    chat()
